#!/usr/bin/env python3

import os
import sys

EXGDBPATH = os.environ.get("EXGDBPATH")
if EXGDBPATH == None:
    print("Please export $EXGDBPATH")
    exit()
LIB = EXGDBPATH + "/lib"
PLUGINS = EXGDBPATH + "/plugins"
INITS = EXGDBPATH + "/inits"

sys.path.insert(0, LIB)
from enert import *

def gitRemoteV_to_repoUrl(line):
    url = line[7:]
    reved_url = list(url)
    reved_url.reverse()
    reved_url_bak = reved_url.copy()
    for ch in reved_url_bak:
        if ch == " ":
            break
        reved_url.pop(0)
    url = reved_url
    url.reverse()
    url = "".join(url)
    return url

def repoUrl_to_repoName(repo_url):
    reversed_repo_url = list(repo_url)
    reversed_repo_url.reverse()
    reversed_repo_name = ""
    for ch in reversed_repo_url:
        if ch == "/": break
        reversed_repo_name += ch
    repo_name = list(reversed_repo_name)
    repo_name.reverse()
    repo_name = "".join(repo_name)
    return repo_name

plugin_dict = {
        "exgdb": {"url": "https://github.com/miyase256/exgdb", "path": EXGDBPATH + "/exgdb.py"},
        "peda": {"url": "https://github.com/longld/peda", "path": PLUGINS + "/peda"},
        "Pwngdb": {"url": "https://github.com/scwuaptx/Pwngdb", "path": PLUGINS + "/Pwngdb"}
}
out, err = Shell("ls -1 %s/" % PLUGINS).readlines()
fnames = out
for fname in fnames:
    plugin_path = PLUGINS + "/" + fname
    plugin_base = os.path.basename(plugin_path)
    plugin_name = plugin_base.replace(".disabled", "")
    if plugin_name in plugin_dict.keys(): continue
    f = File(plugin_path)
    if not f.isdir(): continue
    out, err = Shell("cd %s && git remote -v" % plugin_path).readlines()
    if len(out) < 1:
        print("error: can not confirm git repository")
        exit()
    for line in out:
        if line[:6] != "origin":
            continue
        plugin_url = gitRemoteV_to_repoUrl(line)
        plugin_dict[plugin_name] = {"url": plugin_url, "path": plugin_path}
        break
plugin_list = [key for key in plugin_dict.keys()]

usage = """%s <command> [args]
command: list
         install <peda/Pwngdb/ANY PLUGIN URL>
         delete  <peda/Pwngdb/ANY PLUGIN NAME>
         update  <exgdb/peda/Pwngdb/ANY PLUGIN NAME>
         enable  <exgdb/peda/Pwngdb/ANY PLUGIN NAME>
         disable <exgdb/peda/Pwngdb/ANY PLUGIN NAME>""" % os.path.basename(sys.argv[0])

if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
    print(usage)
    exit()

parser = mkparser(usage, ["list", "install", "delete", "update", "enable", "disable"])
args = parser.parse_args(sys.argv[1:])

def plugin_check(plugin_name):
    if not plugin_name in plugin_list:
        print("invalid plugin name: %s" % plugin_name)
        usage_plugins = ", ".join(plugin_list)
        print("usage: %s" % usage_plugins)
        exit()

if args.command == "list":
    for plugin_name in plugin_list:
        plugin_path = plugin_dict[plugin_name]["path"]
        if File(plugin_path).exist():
            print(green("%s: enabled" % plugin_name, "bold"))
        elif File(plugin_path + ".disabled").exist():
            print(red("%s: disabled" % plugin_name, "bold"))
        else:
            print(red("%s: not installed!!" % plugin_name, "bold"))
elif args.command == "install":
    if len(args.args) < 1:
        print("error: invalid arguments")
        exit()
    # arg == plugin name
    if args.args[0] in plugin_list:
        plugin_name = args.args[0]
        plugin_path = plugin_dict[plugin_name]["path"]
        f_enabled = File(plugin_path)
        f_disabled = File("%s.disabled" % plugin_path)
        if f_enabled.exist() or f_disabled.exist():
            print("%s is already installed" % plugin_name)
            exit()
        plugin_url = plugin_dict[plugin_name]["url"]
        plugin_path = plugin_dict[plugin_name]["path"]
        if plugin_name == "exgdb":
            if File(EXGDBPATH).exist():
                print("exgdb is already installed")
                exit()
            Shell("git clone %s %s" % (plugin_url, EXGDBPATH)).call()
        else:
            Shell("git clone %s %s" % (plugin_url, plugin_path)).call()
    # arg == plugin repository url
    else:
        plugin_url = args.args[0]
        plugin_name = repoUrl_to_repoName(plugin_url)
        if plugin_name == "exgdb":
            if File(EXGDBPATH).exist():
                print("exgdb is already installed")
                exit()
            Shell("git clone %s %s" % (plugin_url, EXGDBPATH)).call()
        else:
            if File("%s/%s" % (PLUGINS, plugin_name)).exist():
                print("%s is already installed" % plugin_name)
                print("try \"update\" or \"delete\"")
                exit()
            Shell("git clone %s %s/%s" % (plugin_url, PLUGINS, plugin_name)).call()
    f_plugin = File("%s/%s" % (PLUGINS, plugin_name))
    install_successful_exgdb = plugin_name == "exgdb" and File(EXGDBPATH).exist()
    if install_successful_exgdb or f_plugin.exist():
        print("[+]install successful")
        Shell("exgdbctl list").call()
    else:
        print("[+]install failed")
elif args.command == "update":
    if len(args.args) < 1:
        print("error: invalid arguments")
        exit()
    plugin_name = args.args[0]
    plugin_check(plugin_name)
    plugin_path = plugin_dict[plugin_name]["path"]
    f_enabled = File(plugin_path)
    f_disabled = File("%s.disabled" % plugin_path)
    if f_enabled.exist():
        f_plugin = f_enabled
    elif f_disabled.exist():
        f_plugin = f_disabled
    else:
        print("%s is not installed" % plugin_name)
        exit()
    Shell("cd %s && git pull --rebase origin master" % f_plugin.abspath).call()
elif args.command == "enable":
    if len(args.args) < 1:
        print("error: invalid arguments")
        exit()
    plugin_name = args.args[0]
    plugin_check(plugin_name)
    plugin_path = plugin_dict[plugin_name]["path"]
    f_enabled = File(plugin_path)
    f_disabled = File("%s.disabled" % plugin_path)
    if f_enabled.exist():
        print("%s is already enabled" % plugin_name)
        exit()
    if not f_disabled.exist():
        print("%s is not installed" % plugin_name)
        exit()
    plugin_path = plugin_dict[plugin_name]["path"]
    out, err = Shell("mv %s.disabled %s" % (plugin_path, plugin_path)).readlines()
    if not out == []:
        for line in out:
            print(line)
    if err == []:
        print("[+]enabled %s" % plugin_name)
        Shell("exgdbctl list").call()
    else:
        print("[+]error:")
        for line in err:
            print(line)
elif args.command == "disable":
    if len(args.args) < 1:
        print("error: invalid arguments")
        exit()
    plugin_name = args.args[0]
    plugin_check(plugin_name)
    plugin_path = plugin_dict[plugin_name]["path"]
    f_enabled = File(plugin_path)
    f_disabled = File("%s.disabled" % plugin_path)
    if f_disabled.exist():
        print("%s is already disabled" % plugin_name)
        exit()
    if not f_enabled.exist():
        print("%s is not installed" % plugin_name)
        exit()
    plugin_path = plugin_dict[plugin_name]["path"]
    out, err = Shell("mv %s %s.disabled" % (plugin_path, plugin_path)).readlines()
    if not out == []:
        for line in out:
            print(line)
    if err == []:
        print("[+]disabled %s" % plugin_name)
        Shell("exgdbctl list").call()
    else:
        print("[+]error: ")
        for line in err:
            print(line)
elif args.command == "delete":
    if len(args.args) < 1:
        print("error: invalid arguments")
        exit()
    plugin_name = args.args[0]
    plugin_check(plugin_name)
    plugin_path = plugin_dict[plugin_name]["path"]
    f_enabled = File(plugin_path)
    f_disabled = File("%s.disabled" % plugin_path)
    if f_enabled.exist():
        f_plugin = f_enabled
    elif f_disabled.exist():
        f_plugin = f_disabled
    else:
        print("%s is not installed" % plugin_name)
        exit()
    if plugin_name == "exgdb":
        print("[!]You can not delete $EXGDBPATH by exgdbctl.")
        exit()
    else:
        print("[+]deleting %s" % f_plugin.abspath)
        out, err = Shell("rm -rf %s" % f_plugin.abspath).readlines()
    if err == []:
        print("[+]delete successful")
        Shell("exgdbctl list").call()
    else:
        print("[+]delete failed")
        for line in err:
            print(line)
