#!/usr/bin/env python3

import os
import sys

#THISFILE = os.path.abspath(os.path.expanduser(__file__))
#if os.path.islink(THISFILE):
#    THISFILE = os.readlink(THISFILE)
EXGDBPATH = os.environ.get("EXGDBPATH")
if EXGDBPATH == None:
    print("Please export $EXGDBPATH")
    exit()
LIB = EXGDBPATH + "/lib"
PLUGINS = EXGDBPATH + "/plugins"
INITS = EXGDBPATH + "/inits"

lib_dict = {
        "peda": "https://github.com/longld/peda",
        "expeda": "https://github.com/miyagaw61/expeda",
        "Pwngdb": "https://github.com/scwuaptx/Pwngdb"
        }
plugin_list = [key for key in lib_dict.keys()]

sys.path.insert(0, LIB)
from enert import *

usage = """%s <command> [<args>]
command: list
         install <peda/expeda/Pwngdb/ANY PLUGIN URL>
         delete  <peda/expeda/Pwngdb/ANY PLUGIN NAME>
         update  <exgdb/peda/expeda/Pwngdb/ANY PLUGIN NAME>
         enable  <exgdb/peda/expeda/Pwngdb/ANY PLUGIN NAME>
         disable <exgdb/peda/expeda/Pwngdb/ANY PLUGIN NAME>""" % os.path.basename(sys.argv[0])

if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
    print(usage)
    exit()

parser = mkparser(usage, ["list", "install", "delete", "update", "enable", "disable"])
args = parser.parse_args(sys.argv[1:])

def default_plugin_check(plugin_name):
    if not plugin_name in plugin_list:
        print("invalid plugin name: %s" % plugin_name)
        usage_plugins = ", ".join(plugin_list)
        print("usage: %s" % usage_plugins)
        exit()

if len(args.args) > 0:
    plugin_name = args.args[0]
    f = File("%s/%s" % (PLUGINS, plugin_name))
    f_disabled = File("%s/%s.disabled" % (PLUGINS, plugin_name))

if args.command == "list":
    for dirname in plugin_list:
        dirname = PLUGINS + "/" + dirname
        if File(dirname).exist():
            print(green("%s: enabled" % os.path.basename(dirname), "bold"))
        if File(dirname + ".disabled").exist():
            print(red("%s: disabled" % os.path.basename(dirname), "bold"))
elif args.command == "install":
    if args.args[0] in plugin_list:
        if f.exist() or f_disabled.exist():
            print("%s is already exist" % plugin_name)
            exit()
        Shell("git clone %s %s/%s" % (lib_dict[plugin_name], PLUGINS, plugin_name)).call()
    else:
        r_repo = re.compile(r".*/(.*)")
        plugin_dir = "%s/%s" % (PLUGINS, r_repo.findall(args.args[0])[0])
        plugin_disabled_dir = plugin_dir + ".disabled"
        if File(plugin_dir).exist():
            print("already exists: %s" % plugin_dir)
            exit()
        if File(plugin_disabled_dir).exist():
            print("already exists: %s" % plugin_disabled_dir)
            exit()
        Shell("git clone %s %s" % (args.args[0], plugin_dir)).call()
        f = File("%s/init.conf" % INITS)
        f_lastinit = File("%s/lastinit" % INITS)
        lines = f.readlines()
        for i in range(len(lines)):
            plugin_file = lines[i]
            init_file = "source_" + os.path.basename(plugin_file)
            f_init = File("%s/%s" % (INITS, init_file))
            f_plugin = File("%s/%s" % (PLUGINS, plugin_file))
            if not f_plugin.exist():
                print("ERROR: %s is not found" % f_plugin.abspath)
                exit()
            if f_init.exist():
                f_init.rm()
            f_init.add("gdb.execute(\"source %s/" + plugin_file + "\" % PLUGINPATH)\n")
            if i != len(lines)-1:
                next_plugin_file = lines[i+1]
                next_init_file = "source_" + os.path.basename(next_plugin_file)
                f_init.add("gdb.execute(\"source %s/" + next_init_file + "\" % INITS)\n")
                f_init = File(next_init_file)
                if f_init.exist():
                    f_init.rm()
                f_init.add("gdb.execute(\"source %s/" + next_plugin_file + "\" % PLUGINPATH)\n")
                f_lastinit.write("%s/%s" % (INITS, next_init_file))
elif args.command == "update":
    default_plugin_check(args.args[0])
    plugin_dir = None
    if f.exist():
        f_plugin = f
    elif f_disabled.exist():
        f_plugin = f_disabled
    else:
        print("%s is not installed" % plugin_name)
        exit()
    Shell("cd %s && git pull --rebase origin master" % f_plugin.abspath).call()
elif args.command == "enable":
    default_plugin_check(args.args[0])
    if f.exist():
        print("%s is already enabled" % plugin_name)
        exit()
    if not f_disabled.exist():
        print("%s is not installed" % plugin_name)
        exit()
    Shell("mv %s/%s.disabled %s/%s" % (PLUGINS, plugin_name, PLUGINS, plugin_name)).call()
    print("[+]enabled %s" % plugin_name)
    Shell("exgdbctl list").call()
elif args.command == "disable":
    default_plugin_check(args.args[0])
    if not f.exist():
        print("%s is already disabled" % plugin_name)
        exit()
    Shell("mv %s/%s %s/%s.disabled" % (PLUGINS, plugin_name, PLUGINS, plugin_name)).call()
    print("[+]disabled %s" % plugin_name)
    Shell("exgdbctl list").call()
elif args.command == "delete":
    default_plugin_check(args.args[0])
    if f.exist():
        print("deleting %s" % f.abspath)
        Shell("rm -rf %s" % f.abspath).call()
    if f_disabled.exist():
        print("deleting %s" % f_disabled.abspath)
        Shell("rm -rf %s" % f_disabled.abspath).call()
